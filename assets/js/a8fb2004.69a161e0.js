"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[159],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(t),m=r,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||o;return t?a.createElement(f,i(i({ref:n},u),{},{components:t})):a.createElement(f,i({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},987:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var a=t(7462),r=t(3366),o=(t(7294),t(3905)),i=["components"],l={title:"Interfaces",sidebar_position:3},s="Interfaces",c={unversionedId:"modules/interfaces",id:"version-0.1/modules/interfaces",isDocsHomePage:!1,title:"Interfaces",description:"MAGDA interfaces are not strict interfaces known from programming languages but classes encapsulating results that are passed between modules. They can be understood as a data contract. However, the main concept is still similar to real interfaces - it is a way to accept multiple predecessors of a module that returns a result of the same data type.",source:"@site/versioned_docs/version-0.1/modules/interfaces.md",sourceDirName:"modules",slug:"/modules/interfaces",permalink:"/magda/docs/modules/interfaces",editUrl:"https://github.com/NeuroSYS-pl/magda/edit/main/web/versioned_docs/version-0.1/modules/interfaces.md",tags:[],version:"0.1",sidebarPosition:3,frontMatter:{title:"Interfaces",sidebar_position:3},sidebar:"version-0.1/tutorialSidebar",previous:{title:"Workflow",permalink:"/magda/docs/modules/workflow"},next:{title:"Stateful Modules",permalink:"/magda/docs/modules/stateful"}},u=[{value:"Idea",id:"idea",children:[]},{value:"Decorator <code>@produce</code>",id:"decorator-produce",children:[]},{value:"Do all single values have to be encapsulated in interfaces?",id:"do-all-single-values-have-to-be-encapsulated-in-interfaces",children:[]},{value:"Examples of incorrect usage",id:"examples-of-incorrect-usage",children:[]},{value:"A correct advanced example",id:"a-correct-advanced-example",children:[]}],p={toc:u};function d(e){var n=e.components,t=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"interfaces"},"Interfaces"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"MAGDA")," interfaces are not strict interfaces known from programming languages but classes encapsulating results that are passed between modules. They can be understood as a data contract. However, the main concept is still similar to real interfaces - it is a way to accept multiple predecessors of a module that returns a result of the same data type."),(0,o.kt)("h2",{id:"idea"},"Idea"),(0,o.kt)("p",null,"An exemplary use case is when a given module is preceded by different modules having different logic in every experiment pipeline, but always expecting the same data type. A solution for that could be to assign a common interface for predecessors' results and accept such interface as input in the given module. See the example below:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"TeapotModule")," accepts predecessors returning ",(0,o.kt)("inlineCode",{parentName:"p"},"TeaLeaves"),". Alternative types of tea, that can be used in separate runtimes, have to produce results exactly of the same kind."),(0,o.kt)("p",null,"Interfaces can be defined as easily as:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from magda.module.module import Module\n\n# Common interface\nclass TeaLeaves(Module.Interface):\n    ...\n\n# Types of tea in alphabetical order\n@register('black-tea')\n@produce(TeaLeaves)\n@finalize\nclass BlackTeaGetter(Module.Runtime):\n    def run(self, *args, **kwargs):\n        ...\n\n@register('green-tea')\n@produce(TeaLeaves)\n@finalize\nclass GreenTeaGetter(Module.Runtime):\n    def run(self, *args, **kwargs):\n        ...\n\n@register('white-tea')\n@produce(TeaLeaves)\n@finalize\nclass WhiteTeaGetter(Module.Runtime):\n    def run(self, *args, **kwargs):\n        ...\n\n# Final module\n@register('teapot')\n@accept(TeaLeaves)\n@finalize\nclass TeapotModule(Module.Runtime):\n    def run(self, *args, **kwargs):\n        ...\n")),(0,o.kt)("p",null,"An interface has to inherit from the ",(0,o.kt)("inlineCode",{parentName:"p"},"Module.Interface")," class. ",(0,o.kt)("inlineCode",{parentName:"p"},"TeapotModule")," implements ",(0,o.kt)("inlineCode",{parentName:"p"},"Module.Runtime"),", which can take as its input only modules that produce results coherent with the data type it accepts (in this case ",(0,o.kt)("inlineCode",{parentName:"p"},"TeaLeaves"),"). This has to be defined using the ",(0,o.kt)("inlineCode",{parentName:"p"},"@accept")," decorator before the definition of ",(0,o.kt)("inlineCode",{parentName:"p"},"TeapotModule")," and the ",(0,o.kt)("inlineCode",{parentName:"p"},"@produce")," decorator in ",(0,o.kt)("em",{parentName:"p"},"tea getters"),"."),(0,o.kt)("p",null,"A following, YAML configuration file is consistent with the example above and is a valid pipeline structure:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"modules:\n  - name: tea-getter\n    type: green-tea\n\n  - name: small-teapot\n    type: teapot\n    depends_on:\n      - tea-getter\n")),(0,o.kt)("p",null,"Modules: ",(0,o.kt)("inlineCode",{parentName:"p"},"tea-getter")," is of type ",(0,o.kt)("inlineCode",{parentName:"p"},"GreenTeaGetter"),", that produces a correct data interface (",(0,o.kt)("inlineCode",{parentName:"p"},"TeaLeaves"),"), which is acceptable by ",(0,o.kt)("inlineCode",{parentName:"p"},"TeapotModule"),". That is why it can be a valid predecessor of ",(0,o.kt)("inlineCode",{parentName:"p"},"small-teapot"),"."),(0,o.kt)("h2",{id:"decorator-produce"},"Decorator ",(0,o.kt)("inlineCode",{parentName:"h2"},"@produce")),(0,o.kt)("p",null,"We use ",(0,o.kt)("inlineCode",{parentName:"p"},"@produce")," decorator above the definition of a class in order to specify the interface of the module's output. The ",(0,o.kt)("inlineCode",{parentName:"p"},"@produce")," decorator may accept only a single interface and the result returned in this module's ",(0,o.kt)("inlineCode",{parentName:"p"},"run")," function always has to be of that interface. ",(0,o.kt)("inlineCode",{parentName:"p"},"@produce")," will be described in detail in the section devoted to ",(0,o.kt)("inlineCode",{parentName:"p"},"Modules"),". Below you can see a correct definition of a submodule. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@produce(CorrectDataInterface)\n@finalize\nclass Submodule(Module.Runtime):\n    def run(self, *args, **kwargs):\n        important_string = 'This is important'\n        # some logic happens here\n        return CorrectDataInterface(important_string)\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Submodule")," should produce a result of type ",(0,o.kt)("inlineCode",{parentName:"p"},"CorrectDataInterface"),", which is done in the ",(0,o.kt)("inlineCode",{parentName:"p"},"run")," function."),(0,o.kt)("h2",{id:"do-all-single-values-have-to-be-encapsulated-in-interfaces"},"Do all single values have to be encapsulated in interfaces?"),(0,o.kt)("p",null,"When the ",(0,o.kt)("inlineCode",{parentName:"p"},"@produce")," decorator is not defined, a module can return a value of any type, as shown below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@finalize\nclass Submodule(Module.Runtime):\n    def run(self, *args, **kwargs):\n        important_magic_integer = 7\n        # some logic happens here\n        return important_magic_integer\n")),(0,o.kt)("p",null,"However, when ",(0,o.kt)("inlineCode",{parentName:"p"},"@produce")," decorator was defined, even a value of primitive type has to be encapsulated in an interface. In such a case, this is the only valid data contract in ",(0,o.kt)("em",{parentName:"p"},"MAGDA"),". Even if it is a float or an integer, it has to be enclosed within an object."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@produce(CustomInteger)\n@finalize\nclass Submodule(Module.Runtime):\n    def run(self, *args, **kwargs):\n        important_magic_integer = 7\n        # some logic happens here\n        return CustomInteger(important_magic_integer)\n")),(0,o.kt)("h2",{id:"examples-of-incorrect-usage"},"Examples of incorrect usage"),(0,o.kt)("p",null,"Please, have a look at the following examples that are ",(0,o.kt)("strong",{parentName:"p"},"incorrect"),". "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"A module cannot produce multiple interfaces:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@produce(CorrectInterface, AdditionalCorrectInterface) # Wrong: should be just one argument\n@finalize\nclass ModuleIncorrectSample(Module.Runtime):\n    ...\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"A module cannot produce not an interface (i.e. another module):")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@finalize\nclass CorrectAnotherModule(Module.Runtime):\n    ...\n\n@produce(CorrectAnotherModule) # Wrong: should be a class inheriting from ModuleInterface\n@finalize\nclass ModuleSample(Module.Runtime):\n    ...\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"A module cannot produce an interface that is not inheriting from ",(0,o.kt)("inlineCode",{parentName:"strong"},"ModuleInterface"),":")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class IncorrectInterface(ABC):\n    ...\n\n@produce(IncorrectInterface) # Wrong: should be a class inheriting from ModuleInterface\n@finalize\nclass ModuleIncorrectSample(Module.Runtime):\n    ...\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"A module cannot produce null or empty  interface:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@produce(None)  # Wrong: should be an interface\n@finalize\nclass ModuleIncorrectSample(Module.Runtime):\n    ...\n\n@produce()  # Wrong: should be skipped\n@finalize\nclass ModuleIncorrectAnotherSample(Module.Runtime):\n    ...\n")),(0,o.kt)("h2",{id:"a-correct-advanced-example"},"A correct advanced example"),(0,o.kt)("p",null,"Below you can find a more complicated, correct example for an imaginary pipeline of making a ",(0,o.kt)("em",{parentName:"p"},"Caff\xe8 Americano"),". For details and questions related to accessing results from concrete modules by their interfaces, refer to ",(0,o.kt)("a",{parentName:"p",href:"/magda/docs/modules/module"},"Modules"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from magda.decorators import register, finalize, accept, produce, expose\nfrom magda.module import Module\n\nclass Liquid(Module.Interface):\n    def __init__(self, liquid_type: str, volume: str):\n        self.liquid_type = liquid_type\n        self.volume = volume\n\n@register('coffee-machine-dispenser')\n@produce(Liquid)\n@finalize\nclass CoffeeMachineDispenser(Module.Runtime):\n    def run(self, data, request, *args, **kwargs):\n        coffee_type = self.shared_parameters['coffee']\n        liquid_type = self.parameters['liquid']\n        # Returns agreed (@produce) interface\n        return Liquid(\n            liquid_type=liquid_type,\n            volume=self.get_volume(coffee_type, request),\n        )\n\n@register('mug')\n@accept(Liquid)\n@finalize\nclass Mug(Module.Runtime):\n    def run(self, data, *args, **kwargs):\n        parts = data.of(Liquid)  # the results of modules producing liquids\n        fluid_mechanics = self.context['fluid-mechanics']\n        content = fluid_mechanics.mix(parts)\n        return content\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"modules:\n  - name: coffee-dispenser\n    type: coffee-machine-dispenser\n    parameters:\n      liquid: coffee\n\n  - name: water-dispenser\n    type: coffee-machine-dispenser\n    parameters:\n      liquid: water\n\n  - name: coding-mug\n    type: mug\n    expose: caffe-americano\n    depends_on:\n      - coffee-dispenser\n      - water-dispenser\n\nshared_parameters:\n  coffee: americano\n")))}d.isMDXComponent=!0}}]);